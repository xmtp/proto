// Message API

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.21.8
// source: message_api/v3/mls.proto

package v3

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	MlsApi_PublishToGroup_FullMethodName       = "/xmtp.message_api.v3.MlsApi/PublishToGroup"
	MlsApi_PublishWelcomes_FullMethodName      = "/xmtp.message_api.v3.MlsApi/PublishWelcomes"
	MlsApi_RegisterInstallation_FullMethodName = "/xmtp.message_api.v3.MlsApi/RegisterInstallation"
	MlsApi_UploadKeyPackage_FullMethodName     = "/xmtp.message_api.v3.MlsApi/UploadKeyPackage"
	MlsApi_FetchKeyPackages_FullMethodName     = "/xmtp.message_api.v3.MlsApi/FetchKeyPackages"
	MlsApi_RevokeInstallation_FullMethodName   = "/xmtp.message_api.v3.MlsApi/RevokeInstallation"
	MlsApi_GetIdentityUpdates_FullMethodName   = "/xmtp.message_api.v3.MlsApi/GetIdentityUpdates"
)

// MlsApiClient is the client API for MlsApi service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MlsApiClient interface {
	// Publish a MLS payload, that would be validated before being stored to the
	// network
	PublishToGroup(ctx context.Context, in *PublishToGroupRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Publish a batch of welcome messages
	PublishWelcomes(ctx context.Context, in *PublishWelcomesRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Register a new installation, which would be validated before storage
	RegisterInstallation(ctx context.Context, in *RegisterInstallationRequest, opts ...grpc.CallOption) (*RegisterInstallationResponse, error)
	// Upload a new KeyPackage, which would be validated before storage
	UploadKeyPackage(ctx context.Context, in *UploadKeyPackageRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Get one or more Key Packages by installation_id
	FetchKeyPackages(ctx context.Context, in *FetchKeyPackagesRequest, opts ...grpc.CallOption) (*FetchKeyPackagesResponse, error)
	// Would delete all key packages associated with the installation and mark
	// the installation as having been revoked
	RevokeInstallation(ctx context.Context, in *RevokeInstallationRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Used to check for changes related to members of a group.
	// Would return an array of any new installations associated with the wallet
	// address, and any revocations that have happened.
	GetIdentityUpdates(ctx context.Context, in *GetIdentityUpdatesRequest, opts ...grpc.CallOption) (*GetIdentityUpdatesResponse, error)
}

type mlsApiClient struct {
	cc grpc.ClientConnInterface
}

func NewMlsApiClient(cc grpc.ClientConnInterface) MlsApiClient {
	return &mlsApiClient{cc}
}

func (c *mlsApiClient) PublishToGroup(ctx context.Context, in *PublishToGroupRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, MlsApi_PublishToGroup_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mlsApiClient) PublishWelcomes(ctx context.Context, in *PublishWelcomesRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, MlsApi_PublishWelcomes_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mlsApiClient) RegisterInstallation(ctx context.Context, in *RegisterInstallationRequest, opts ...grpc.CallOption) (*RegisterInstallationResponse, error) {
	out := new(RegisterInstallationResponse)
	err := c.cc.Invoke(ctx, MlsApi_RegisterInstallation_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mlsApiClient) UploadKeyPackage(ctx context.Context, in *UploadKeyPackageRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, MlsApi_UploadKeyPackage_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mlsApiClient) FetchKeyPackages(ctx context.Context, in *FetchKeyPackagesRequest, opts ...grpc.CallOption) (*FetchKeyPackagesResponse, error) {
	out := new(FetchKeyPackagesResponse)
	err := c.cc.Invoke(ctx, MlsApi_FetchKeyPackages_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mlsApiClient) RevokeInstallation(ctx context.Context, in *RevokeInstallationRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, MlsApi_RevokeInstallation_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mlsApiClient) GetIdentityUpdates(ctx context.Context, in *GetIdentityUpdatesRequest, opts ...grpc.CallOption) (*GetIdentityUpdatesResponse, error) {
	out := new(GetIdentityUpdatesResponse)
	err := c.cc.Invoke(ctx, MlsApi_GetIdentityUpdates_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MlsApiServer is the server API for MlsApi service.
// All implementations must embed UnimplementedMlsApiServer
// for forward compatibility
type MlsApiServer interface {
	// Publish a MLS payload, that would be validated before being stored to the
	// network
	PublishToGroup(context.Context, *PublishToGroupRequest) (*emptypb.Empty, error)
	// Publish a batch of welcome messages
	PublishWelcomes(context.Context, *PublishWelcomesRequest) (*emptypb.Empty, error)
	// Register a new installation, which would be validated before storage
	RegisterInstallation(context.Context, *RegisterInstallationRequest) (*RegisterInstallationResponse, error)
	// Upload a new KeyPackage, which would be validated before storage
	UploadKeyPackage(context.Context, *UploadKeyPackageRequest) (*emptypb.Empty, error)
	// Get one or more Key Packages by installation_id
	FetchKeyPackages(context.Context, *FetchKeyPackagesRequest) (*FetchKeyPackagesResponse, error)
	// Would delete all key packages associated with the installation and mark
	// the installation as having been revoked
	RevokeInstallation(context.Context, *RevokeInstallationRequest) (*emptypb.Empty, error)
	// Used to check for changes related to members of a group.
	// Would return an array of any new installations associated with the wallet
	// address, and any revocations that have happened.
	GetIdentityUpdates(context.Context, *GetIdentityUpdatesRequest) (*GetIdentityUpdatesResponse, error)
	mustEmbedUnimplementedMlsApiServer()
}

// UnimplementedMlsApiServer must be embedded to have forward compatible implementations.
type UnimplementedMlsApiServer struct {
}

func (UnimplementedMlsApiServer) PublishToGroup(context.Context, *PublishToGroupRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PublishToGroup not implemented")
}
func (UnimplementedMlsApiServer) PublishWelcomes(context.Context, *PublishWelcomesRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PublishWelcomes not implemented")
}
func (UnimplementedMlsApiServer) RegisterInstallation(context.Context, *RegisterInstallationRequest) (*RegisterInstallationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterInstallation not implemented")
}
func (UnimplementedMlsApiServer) UploadKeyPackage(context.Context, *UploadKeyPackageRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UploadKeyPackage not implemented")
}
func (UnimplementedMlsApiServer) FetchKeyPackages(context.Context, *FetchKeyPackagesRequest) (*FetchKeyPackagesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FetchKeyPackages not implemented")
}
func (UnimplementedMlsApiServer) RevokeInstallation(context.Context, *RevokeInstallationRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RevokeInstallation not implemented")
}
func (UnimplementedMlsApiServer) GetIdentityUpdates(context.Context, *GetIdentityUpdatesRequest) (*GetIdentityUpdatesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetIdentityUpdates not implemented")
}
func (UnimplementedMlsApiServer) mustEmbedUnimplementedMlsApiServer() {}

// UnsafeMlsApiServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MlsApiServer will
// result in compilation errors.
type UnsafeMlsApiServer interface {
	mustEmbedUnimplementedMlsApiServer()
}

func RegisterMlsApiServer(s grpc.ServiceRegistrar, srv MlsApiServer) {
	s.RegisterService(&MlsApi_ServiceDesc, srv)
}

func _MlsApi_PublishToGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PublishToGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MlsApiServer).PublishToGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MlsApi_PublishToGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MlsApiServer).PublishToGroup(ctx, req.(*PublishToGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MlsApi_PublishWelcomes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PublishWelcomesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MlsApiServer).PublishWelcomes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MlsApi_PublishWelcomes_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MlsApiServer).PublishWelcomes(ctx, req.(*PublishWelcomesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MlsApi_RegisterInstallation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterInstallationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MlsApiServer).RegisterInstallation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MlsApi_RegisterInstallation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MlsApiServer).RegisterInstallation(ctx, req.(*RegisterInstallationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MlsApi_UploadKeyPackage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UploadKeyPackageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MlsApiServer).UploadKeyPackage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MlsApi_UploadKeyPackage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MlsApiServer).UploadKeyPackage(ctx, req.(*UploadKeyPackageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MlsApi_FetchKeyPackages_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FetchKeyPackagesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MlsApiServer).FetchKeyPackages(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MlsApi_FetchKeyPackages_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MlsApiServer).FetchKeyPackages(ctx, req.(*FetchKeyPackagesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MlsApi_RevokeInstallation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RevokeInstallationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MlsApiServer).RevokeInstallation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MlsApi_RevokeInstallation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MlsApiServer).RevokeInstallation(ctx, req.(*RevokeInstallationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MlsApi_GetIdentityUpdates_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetIdentityUpdatesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MlsApiServer).GetIdentityUpdates(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MlsApi_GetIdentityUpdates_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MlsApiServer).GetIdentityUpdates(ctx, req.(*GetIdentityUpdatesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// MlsApi_ServiceDesc is the grpc.ServiceDesc for MlsApi service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MlsApi_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "xmtp.message_api.v3.MlsApi",
	HandlerType: (*MlsApiServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PublishToGroup",
			Handler:    _MlsApi_PublishToGroup_Handler,
		},
		{
			MethodName: "PublishWelcomes",
			Handler:    _MlsApi_PublishWelcomes_Handler,
		},
		{
			MethodName: "RegisterInstallation",
			Handler:    _MlsApi_RegisterInstallation_Handler,
		},
		{
			MethodName: "UploadKeyPackage",
			Handler:    _MlsApi_UploadKeyPackage_Handler,
		},
		{
			MethodName: "FetchKeyPackages",
			Handler:    _MlsApi_FetchKeyPackages_Handler,
		},
		{
			MethodName: "RevokeInstallation",
			Handler:    _MlsApi_RevokeInstallation_Handler,
		},
		{
			MethodName: "GetIdentityUpdates",
			Handler:    _MlsApi_GetIdentityUpdates_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "message_api/v3/mls.proto",
}
