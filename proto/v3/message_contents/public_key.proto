// Structure for representing public keys of different types,
// including signatures used to authenticate the keys.
syntax = "proto3";

package xmtp.v3.message_contents;

import "v3/message_contents/association.proto";

option go_package = "github.com/xmtp/proto/v3/go/v3/message_contents";
option java_package = "org.xmtp.proto.v3.message.contents";

// An unsigned public key used by libxmtp
message VmacUnsignedPublicKey {
    uint64 created_ns = 1;

    oneof union {
        VodozemacCurve25519 curve25519 = 2;
    }

    // A Vodozemac curve25519 key serialized via serde
    // (https://github.com/matrix-org/vodozemac/blob/
    // 929bbaf325686435bdd0ed0d0cc45b0cbad3430d/src/types/curve25519.rs#L100)
    message VodozemacCurve25519 {
        bytes bytes = 1;
    }
}

// A key linked to an XMTP account (e.g. signed by a wallet)
// The purpose of the key is encoded in the signature
message VmacAccountLinkedKey {
    VmacUnsignedPublicKey key = 1;
    oneof association {
        Eip191Association eip_191 = 2;
        LegacyV2IdentityAssociation v2_identity_association = 3;
    }
}

// Identity key used in XMTP v2
message LegacyV2UnsignedPublicIdentityKey {
    uint64 created_ns = 1;
    oneof union {
        Secp256k1Uncompressed secp256k1_uncompressed = 3;
    }

    // Supported key types

    // EC: SECP256k1
    message Secp256k1Uncompressed {
        // uncompressed point with prefix (0x04) [ P || X || Y ], 65 bytes
        bytes bytes = 1; 
    }
}

// Signed identity key used in XMTP v2 (legacy)
message LegacyV2AccountLinkedIdentityKey {
    LegacyV2UnsignedPublicIdentityKey key = 1;
    oneof association {
        Eip191Association eip_191 = 2;
    }
}

// A key linked to an installation (e.g. signed by an installation identity key)
// The purpose of the key is encoded in the signature
message VmacInstallationLinkedKey {
    VmacUnsignedPublicKey key = 1;
}

// A bundle of one time keys uploaded by a client, to be used as
// input to (X)3DH exchanges with it. The server is expected to serve
// and delete one prekey to anyone who requests one.
// In our initial prototype we will not actually use one-time prekeys,
// defaulting to fallback keys.
message VmacOneTimeKeyTopupBundle {
    VmacAccountLinkedKey identity_key = 1;
    repeated VmacInstallationLinkedKey one_time_keys = 2;
}

// A fallback key uploaded by a client, which replaces any existing
// fallback key. The server is expected to serve this prekey when
// all one-time prekeys have been exhausted.
// In our initial prototype we will always use the fallback key in place
// of any one-time prekeys.
message VmacFallbackKeyRotation {
    VmacAccountLinkedKey identity_key = 1;
    VmacInstallationLinkedKey fallback_key = 2;
}

// A contact bundle served by the server to a requesting client
message VmacInstallationPublicKeyBundleV1 {
    VmacAccountLinkedKey identity_key = 1;
    VmacInstallationLinkedKey fallback_key = 2;
}

// A wrapper for versions of the installation contact bundle to allow
// upgradeability
message InstallationContactBundle {
    oneof version {
        VmacInstallationPublicKeyBundleV1 v1 = 1;
    }
}