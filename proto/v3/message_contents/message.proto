// Structure for messages in v3
syntax = "proto3";

package xmtp.v3.message_contents;

import "v3/message_contents/association.proto";
import "v3/message_contents/encoded_content.proto";

option go_package = "github.com/xmtp/proto/v3/go/v3/message_contents";
option java_package = "org.xmtp.proto.v3.message.contents";

// Plaintext header included with messages, visible to all
// Recipients can verify this header has not been tampered with.
// Servers are unable to verify if the header has been tampered with.
message MessageHeaderV1 {
  // SealedSender wrapper for arbitrary bytes
  message SealedSender {
    bytes ephemeral_public_key = 1;
    bytes ephemeral_static_key = 2;
    bytes encrypted_message = 3; // Will be serialized Metadata
  }

  // Metadata that is encrypted via SealedSender and only visible to
  // the recipient
  message Metadata {
    string sender_user_address = 1;
    string sender_installation_id = 2;
    string recipient_user_address = 3;
    string recipient_installation_id = 4;
    bool is_prekey_message = 5;
  }

  // sent_ns is included to protect against replays of the
  // header signature
  uint64 sent_ns = 1;
  SealedSender sealed_metadata = 2; // SealedMetadata
}

// Conversation messages are the primary message type (user to user messages)
message ConversationMessageV1 {
  string convo_id = 1;
  EncodedContent encoded_content = 2;
}

// Encrypted body included with messages, only visible to recipients
// When receiving a message:
// 1. Decrypt the sealed metadata in the header via SealedSender
// 2. Verify that you match the recipient_user_address and
//    recipient_installation_id. Verify that the sender_installation_id matches
//    the sender_user_address.
// 2. Find the relevant session using the sender_user_address and
//    sender_installation_id in the unsealed metadata
// 3. Use the session to decrypt the payload
// 4. Verify that the header_signature in the decrypted payload was produced by
//    signing the header_bytes with the ed25519 key matching the
//    sender_installation_id
// 5. Verify that both the sender_user and recipient_user are partipants of the
//    conversation referenced by convo_id
message MessagePayloadV1 {
  EdDsaSignature header_signature = 1; // Signature of the header_bytes
  oneof contents {
    // We store this as bytes so that it can be safely used
    // to derive the message_id
    bytes conversation_message_v1 = 2; // ConversationMessageV1
    // TODO: Add other message types
    // (Message Backup Request, P4, Message Backup Response)
  }
}

// Combines the plaintext header with the encrypted payload
message MessageEnvelope {
  // First version of the envelope format
  message EnvelopeV1 {
    bytes header_bytes = 1; // MessageHeaderV1
    bytes ciphertext = 2; // Encrypted MessagePayloadV1
  }

  oneof envelope {
    EnvelopeV1 v1 = 1;
  }
}
