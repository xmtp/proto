// Structure for messages in v3
syntax = "proto3";

package xmtp.v3.message_contents;

import "v3/message_contents/association.proto";

option go_package = "github.com/xmtp/proto/v3/go/v3/message_contents";
option java_package = "org.xmtp.proto.v3.message.contents";

// Metadata that is encrypted via SealedSender and only visible to the recipient
// Currently we do not actually encrypt this, actual implementation of
// SealedSender will be added shortly.
message PadlockMessageSealedMetadata {
    string sender_user_address = 1;
    string sender_installation_id = 2;
    string recipient_user_address = 3;
    string recipient_installation_id = 4;
    bool is_prekey_message = 5;
}

// Plaintext header included with messages, visible to all
// Recipients can verify this header has not been tampered with.
// Servers are unable to verify if the header has been tampered with.
message PadlockMessageHeader {
    uint64 sent_ns = 1;
    bytes sealed_metadata = 2;  // PadlockMessageSealedMetadata
}

// The version used for the decrypted padlock message payload
enum PadlockMessagePayloadVersion {
    PADLOCK_MESSAGE_PAYLOAD_VERSION_UNSPECIFIED = 0;
    PADLOCK_MESSAGE_PAYLOAD_VERSION_ONE = 1;
}

// Encrypted body included with messages, only visible to recipients
// When receiving a message:
// 1. Decrypt the sealed metadata in the header via SealedSender
// 2. Verify that you match the recipient_user_address and
//    recipient_installation_id. Verify that the sender_installation_id matches
//    the sender_user_address.
// 2. Find the relevant session using the sender_user_address and
//    sender_installation_id in the unsealed metadata
// 3. Use the session to decrypt the payload
// 4. Verify that the header_signature in the decrypted payload was produced by
//    signing the header_bytes with the ed25519 key matching the
//    sender_installation_id
// 5. Verify that both the sender_user and recipient_user are partipants of the
//    conversation referenced by convo_id
message PadlockMessagePayload {
    PadlockMessagePayloadVersion message_version = 1;
    EdDsaSignature header_signature = 2;    // Signs PadlockMessageHeader
    string convo_id = 3;
    bytes content_bytes = 4;                // EncodedContent
}

// Combines the plaintext header with the encrypted payload
message PadlockMessageEnvelope {
    bytes header_bytes = 1;     // PadlockMessageHeader
    bytes ciphertext = 2;       // Encrypted PadlockMessagePayload
}