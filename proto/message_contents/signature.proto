// Signature is a generic structure for public key signatures.
syntax = "proto3";

package xmtp.message_contents;

option go_package = "github.com/xmtp/proto/v3/go/message_contents";
option java_package = "org.xmtp.proto.message.contents";

// Signature represents a generalized public key signature,
// defined as a union to support cryptographic algorithm agility.
message Signature {
    // Add an enum of possible signature contexts
    enum Context {
        SENDER_KEY_ASSOCIATION = 0;
    }

    enum Scheme {
        ECDSA_SECP256K1_SHA256_UNCOMPRESSED_RSV = 0;
    }
    // ECDSA signature bytes and the recovery bit
    message ECDSACompact {
        bytes bytes = 1; // compact representation [ R || S ], 64 bytes
        uint32 recovery = 2; // recovery bit
    }
    // ECDSA signature bytes and the recovery bit
    // produced by xmtp-js::PublicKey.signWithWallet function, i.e.
    // EIP-191 signature of a "Create Identity" message with the key embedded.
    // Used to sign identity keys.
    message WalletECDSACompact {
        bytes bytes = 1; // compact representation [ R || S ], 64 bytes
        uint32 recovery = 2; // recovery bit
    }
    // Self-describing signature format meant for maximizing interoperability
    message ContextPrefixed {
        // Serialized signature bytes
        bytes signature_bytes = 1;
        // Message bytes before processing that appends the context
        bytes pre_context_message_bytes = 2;
        // Signature derivation scheme
        Scheme scheme = 3;
        // Context the signature should be trusted for e.g. "sender_key_association"
        Context context = 4;
    }
    oneof union {
        ECDSACompact ecdsa_compact = 1;
        WalletECDSACompact wallet_ecdsa_compact = 2;
        ContextPrefixed context_prefixed = 3;
    }
}
