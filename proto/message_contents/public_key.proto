// Structure for representing public keys of different types,
// including signatures used to authenticate the keys.
syntax = "proto3";

package xmtp.message_contents;

import "message_contents/signature.proto";

option go_package = "github.com/xmtp/proto/v3/go/message_contents";
option java_package = "org.xmtp.proto.message.contents";

// An unsigned public key used by libxmtp
message VoodooUnsignedPublicKey {
    uint64 created_ns = 1;

    oneof union {
        VodozemacCurve25519 curve25519 = 2;
    }

    // A Vodozemac curve25519 key serialized via serde
    // (https://github.com/matrix-org/vodozemac/blob/
    // 929bbaf325686435bdd0ed0d0cc45b0cbad3430d/src/types/curve25519.rs#L100)
    message VodozemacCurve25519 {
        bytes bytes = 1;
    }
}

// A key linked to an XMTP account (e.g. signed by a wallet)
// The purpose of the key is encoded in the signature
message VoodooAccountLinkedKey {
    VoodooUnsignedPublicKey key = 1;
    // TODO AccountLinkedSignature signature = 2;
}

// A key linked to a device (e.g. signed by a device identity key)
// The purpose of the key is encoded in the signature
message VoodooDeviceLinkedKey {
    VoodooUnsignedPublicKey key = 1;
    // TODO DeviceLinkedSignature signature = 2;
}

// A bundle of one time keys uploaded by a client, to be used as
// input to (X)3DH exchanges with it. The server is expected to serve
// and delete one prekey to anyone who requests one.
// In our initial prototype we will not actually use one-time prekeys,
// defaulting to fallback keys.
message VoodooOneTimeKeyTopupBundle {
    VoodooAccountLinkedKey identity_key = 1;
    repeated VoodooDeviceLinkedKey one_time_keys = 2;
}

// A fallback key uploaded by a client, which replaces any existing
// fallback key. The server is expected to serve this prekey when
// all one-time prekeys have been exhausted.
// In our initial prototype we will always use the fallback key in place
// of any one-time prekeys.
message VoodooFallbackKeyRotation {
    VoodooAccountLinkedKey identity_key = 1;
    VoodooDeviceLinkedKey fallback_key = 2;
}

// A contact bundle served by the server to a requesting client
message VoodooContactBundle {
    VoodooAccountLinkedKey identity_key = 1;
    // An unused one time prekey or fallback key returned by the server
    VoodooDeviceLinkedKey prekey = 2;
}

// UnsignedPublicKey represents a generalized public key,
// defined as a union to support cryptographic algorithm agility.
message UnsignedPublicKey {
    uint64 created_ns = 1;
    oneof union {
        Secp256k1Uncompressed secp256k1_uncompressed = 3;
    }

    // Supported key types

    // EC: SECP256k1
    message Secp256k1Uncompressed {
        // uncompressed point with prefix (0x04) [ P || X || Y ], 65 bytes
        bytes bytes = 1; 
    }
}

// A public key that is provably linked to a user account, for example
// signed by a wallet
message AccountLinkedPublicKey {
    // V1
    message V1 {
        bytes key_bytes = 1;  // embeds an UnsignedPublicKey

        oneof proof {
            AccountLinkedStaticSignature static_signature = 2;
            AccountLinkedSIWESignature siwe_signature = 3;
        }
    }

    oneof version {
        V1 v1 = 1;
    }
}

// A public key that has been provably unlinked from a user account, for example
// revoked by a wallet signature
message AccountRevokedPublicKey {
    // V1
    message V1 {
        bytes key_bytes = 1;  // embeds an UnsignedPublicKey
        
        oneof proof {
            AccountRevokedStaticSignature static_signature = 2;
        }
    }

    oneof version {
        V1 v1 = 1;
    }
}

// A key that has been signed by an AccountLinkedPrivateKey, for example
// a pre-key 
message SignedPublicKey {
    bytes key_bytes = 1;  // embeds an UnsignedPublicKey
    Signature signature = 2; // signs key_bytes
}

// A bundle of keys representing one side of an X3DH exchange. This could be
// a send key bundle or an inbox key bundle.
message SignedPublicKeyBundleV2 {
    AccountLinkedPublicKey account_linked_key = 1;
    SignedPublicKey pre_key = 2;
}

// DEPRECATION IN PROGRESS

// PublicKeyBundle packages the cryptographic keys associated with a wallet.
message SignedPublicKeyBundle {
    // Identity key MUST be signed by the wallet.
    SignedPublicKey identity_key = 1;
    // Pre-key MUST be signed by the identity key.
    SignedPublicKey pre_key = 2;
}

// LEGACY

// PublicKey represents a generalized public key,
// defined as a union to support cryptographic algorithm agility.
message PublicKey {
    // The key bytes
    message Secp256k1Uncompressed {
        // uncompressed point with prefix (0x04) [ P || X || Y ], 65 bytes
        bytes bytes = 1; 
    }
    uint64 timestamp = 1;
    optional Signature signature = 2;
    oneof union {
        Secp256k1Uncompressed secp256k1_uncompressed = 3;
    }
}

// PublicKeyBundle packages the cryptographic keys associated with a wallet,
// both senders and recipients are identified by their key bundles.
message PublicKeyBundle {
    // Identity key MUST be signed by the wallet.
    PublicKey identity_key = 1;
    // Pre-key MUST be signed by the identity key.
    PublicKey pre_key = 2;
}
