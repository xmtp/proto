// Message API
syntax = "proto3";
package xmtp.mls_validation.v1;

import "identity/associations/association.proto";
import "identity/credential.proto";

option go_package = "github.com/xmtp/proto/v3/go/mls_validation/v1";

// RPCs for the new MLS API
service ValidationApi {
  // Validates and parses a batch of key packages and returns relevant details
  // DEPRECATED
  rpc ValidateKeyPackages(ValidateKeyPackagesRequest) returns (ValidateKeyPackagesResponse) {
    option deprecated = true;
  }

  // Validates and parses a group message and returns relevant details
  rpc ValidateGroupMessages(ValidateGroupMessagesRequest) returns (ValidateGroupMessagesResponse) {}

  // Gets the final association state for a batch of identity updates
  rpc GetAssociationState(GetAssociationStateRequest) returns (GetAssociationStateResponse) {}

  // Validates InboxID key packages and returns credential information for them, without checking
  // whether an InboxId <> InstallationPublicKey pair is really valid.
  // DEPRECATED
  rpc ValidateInboxIdKeyPackages(ValidateKeyPackagesRequest) returns (ValidateInboxIdKeyPackagesResponse) {
    option deprecated = true;
  }

  /**
     Validate a key package, returning the installation ID based on the signing key
     Expects a credential in the inbox_id format.
     **/
  rpc ValidateKeyPackagesV2(ValidateKeyPackagesV2Request) returns (ValidateKeyPackagesV2Response) {}

  // Validate an InboxID Key Package
  // need public key possibly
  rpc ValidateInboxIds(ValidateInboxIdsRequest) returns (ValidateInboxIdsResponse) {}
}

// Validates a Inbox-ID Key Package Type
message ValidateInboxIdKeyPackagesResponse {
  option deprecated = true;
  // one response corresponding to information about one key package
  message Response {
    bool is_ok = 1;
    string error_message = 2;
    xmtp.identity.MlsCredential credential = 3;
    bytes installation_public_key = 4;
    uint64 expiration = 5;
  }

  repeated Response responses = 1;
}

// Contains a batch of serialized Key Packages
message ValidateKeyPackagesRequest {
  option deprecated = true;
  // Wrapper for each key package
  message KeyPackage {
    bytes key_package_bytes_tls_serialized = 1;
    bool is_inbox_id_credential = 2;
  }

  repeated KeyPackage key_packages = 1;
}

// Response to ValidateKeyPackagesRequest
message ValidateKeyPackagesResponse {
  option deprecated = true;
  // An individual response to one key package
  message ValidationResponse {
    bool is_ok = 1;
    string error_message = 2;
    bytes installation_id = 3;
    string account_address = 4;
    bytes credential_identity_bytes = 5;
    uint64 expiration = 6;
  }

  repeated ValidationResponse responses = 1;
}

// Contains a batch of serialized Group Messages
message ValidateGroupMessagesRequest {
  // Wrapper for each message
  message GroupMessage {
    bytes group_message_bytes_tls_serialized = 1;
  }

  repeated GroupMessage group_messages = 1;
}

// Response to ValidateGroupMessagesRequest
message ValidateGroupMessagesResponse {
  // An individual response to one message
  message ValidationResponse {
    bool is_ok = 1;
    string error_message = 2;
    string group_id = 3;
  }

  repeated ValidationResponse responses = 1;
}

// Request to get a final association state for identity updates
message GetAssociationStateRequest {
  // List of identity updates
  repeated xmtp.identity.associations.IdentityUpdate old_updates = 1;
  repeated xmtp.identity.associations.IdentityUpdate new_updates = 2;
}

// Response to GetAssociationStateRequest, containing the final association state
// for an InboxID
message GetAssociationStateResponse {
  xmtp.identity.associations.AssociationState association_state = 1;
  xmtp.identity.associations.AssociationStateDiff state_diff = 2;
}

// Request to validate an InboxID with the backend service. Ensures an Inbox Id <> Installation key are valid.
message ValidateInboxIdsRequest {
  // a single validation request
  message ValidationRequest {
    xmtp.identity.MlsCredential credential = 1;
    bytes installation_public_key = 2;
    repeated xmtp.identity.associations.IdentityUpdate identity_updates = 3;
  }

  // list of validation requests
  repeated ValidationRequest requests = 1;
}

// Response to ValidateInboxIdRequest
message ValidateInboxIdsResponse {
  // a single validation response
  message ValidationResponse {
    bool is_ok = 1;
    string error_message = 2;
    string inbox_id = 3;
  }
  // List of validation responses
  repeated ValidationResponse responses = 1;
}

// Request to validate an array of key packages
message ValidateKeyPackagesV2Request {
  // Wrapper for each key package
  message KeyPackage {
    bytes key_package_bytes_tls_serialized = 1;
  }

  repeated KeyPackage key_packages = 1;
}

message ValidateKeyPackagesV2Response {
  // one response corresponding to information about one key package
  message Response {
    bool is_ok = 1;
    string error_message = 2;
    bytes installation_public_key = 3;
    uint64 expiration = 4;
  }

  repeated Response responses = 1;
}
