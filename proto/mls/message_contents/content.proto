// Message content encoding structures
// Copied from V2 code so that we can eventually retire all V2 message content
syntax = "proto3";

package xmtp.mls.message_contents;

import "device_sync/device_sync.proto";

option go_package = "github.com/xmtp/proto/v3/go/mls/message_contents";
option java_package = "org.xmtp.proto.mls.message.contents";

// ContentTypeId is used to identify the type of content stored in a Message.
message ContentTypeId {
  string authority_id = 1;  // authority governing this content type
  string type_id = 2;       // type identifier
  uint32 version_major = 3; // major version of the type
  uint32 version_minor = 4; // minor version of the type
}

// Recognized compression algorithms
// protolint:disable ENUM_FIELD_NAMES_ZERO_VALUE_END_WITH
enum Compression {
  COMPRESSION_DEFLATE = 0;
  COMPRESSION_GZIP = 1;
}
// protolint:enable ENUM_FIELD_NAMES_ZERO_VALUE_END_WITH

// EncodedContent bundles the content with metadata identifying its type
// and parameters required for correct decoding and presentation of the content.
message EncodedContent {
  // content type identifier used to match the payload with
  // the correct decoding machinery
  ContentTypeId type = 1;
  // optional encoding parameters required to correctly decode the content
  map<string, string> parameters = 2;
  // optional fallback description of the content that can be used in case
  // the client cannot decode or render the content
  optional string fallback = 3;
  // optional compression; the value indicates algorithm used to
  // compress the encoded content bytes
  optional Compression compression = 5;
  // encoded content itself
  bytes content = 4;
}

// A PlaintextEnvelope is the outermost payload that gets encrypted by MLS
message PlaintextEnvelope {
  // Version 1 of the encrypted envelope
  message V1 {
    // Expected to be EncodedContent
    bytes content = 1;
    // A unique value that can be used to ensure that the same content can
    // produce different hashes. May be the sender timestamp.
    string idempotency_key = 2;
  }

  // Version 2 of the encrypted envelope
  message V2 {
    // A unique value that can be used to ensure that the same content can
    // produce different hashes. May be the sender timestamp.
    string idempotency_key = 1;

    oneof message_type {
      // Expected to be EncodedContent
      bytes content = 2;
      // Initiator sends a request to receive sync payload
      DeviceSyncRequest device_sync_request = 3;
      // Some other authorized installation sends a reply with a link to payload
      DeviceSyncReply device_sync_reply = 4;
      // A serialized user preference update
      UserPreferenceUpdate user_preference_update = 5;
    }
  }

  // Selector which declares which version of the EncodedContent this
  // PlaintextEnvelope is
  oneof content {
    V1 v1 = 1;
    V2 v2 = 2;
  }
}

// Initiator or new installation id requesting a sync payload send a request
message DeviceSyncRequest {
  // Unique identifier for each request
  string request_id = 1;
  xmtp.device_sync.BackupOptions options = 4;

  // deprecated
  string pin_code = 2 [deprecated = true];
  xmtp.device_sync.BackupElementSelection kind = 3 [deprecated = true];
}

// Pre-existing installation id capable of supplying a sync payload sends this reply
message DeviceSyncReply {
  // Must match an existing request_id from a message history request
  string request_id = 1;
  // Where the messages can be retrieved from
  string url = 2;
  // Encryption key
  bytes key = 7;
  // Metadata about the backup
  xmtp.device_sync.BackupMetadataSave metadata = 6;

  // deprecated
  uint64 timestamp_ns = 4 [deprecated = true];
  xmtp.device_sync.BackupElementSelection kind = 5 [deprecated = true];
  DeviceSyncKeyType encryption_key = 3 [deprecated = true];
}

// Key used to encrypt the message-bundle
message DeviceSyncKeyType {
  oneof key {
    bytes aes_256_gcm = 1;
  }
}

message UserPreferenceUpdate {
  repeated bytes contents = 1;
}
