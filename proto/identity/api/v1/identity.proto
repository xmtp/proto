// Message API
syntax = "proto3";
package xmtp.identity.api.v1;

import "google/api/annotations.proto";
import "identity/associations/association.proto";
import "protoc-gen-openapiv2/options/annotations.proto";

option go_package = "github.com/xmtp/proto/v3/go/mls/api/v1";
option java_package = "org.xmtp.proto.mls.api.v1";
option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_swagger) = {
  info: {
    title: "IdentityApi";
    version: "1.0";
  };
};

// RPCs for the new MLS API
service IdentityApi {
  // Publishes an identity update for an XID or wallet. An identity update may
  // consist of multiple identity actions that have been batch signed.
  rpc PublishIdentityUpdate(PublishIdentityUpdateRequest) returns (PublishIdentityUpdateResponse) {
    option (google.api.http) = {
      post: "/identity/v1/publish-identity-update"
      body: "*"
    };
  }

  // Used to check for changes related to members of a group.
  // Would return an array of any new installations associated with the wallet
  // address, and any revocations that have happened.
  rpc GetIdentityUpdates(GetIdentityUpdatesRequest) returns (GetIdentityUpdatesResponse) {
    option (google.api.http) = {
      post: "/identity/v1/get-identity-updates"
      body: "*"
    };
  }

  // Retrieve the XIDs for the given addresses
  rpc GetInboxIds(GetInboxIdsRequest) returns (GetInboxIdsResponse) {
    option (google.api.http) = {
      post: "/identity/v1/get-inbox-ids"
      body: "*"
    };
  }

  // Upload a key package to the server, replacing any previous key packages for the installation
  rpc AddKeyPackage(AddKeyPackageRequest) returns (AddKeyPackageResponse) {
    option (google.api.http) = {
      post: "/identity/v1/add-key-package"
      body: "*"
    };
  }

  // Get key package for the given installation IDs.
  // Will return an error if any key packages are not found
  rpc GetKeyPackages(GetKeyPackagesRequest) returns (GetKeyPackagesResponse) {
    option (google.api.http) = {
      post: "/identity/v1/get-key-packages"
      body: "*"
    };
  }
}

// Publishes an identity update to the network
message PublishIdentityUpdateRequest {
  xmtp.identity.associations.IdentityUpdate identity_update = 1;
}

// The response when an identity update is published
message PublishIdentityUpdateResponse {}

// Get all updates for an identity since the specified time
message GetIdentityUpdatesRequest {
  // Points to the last entry the client has received. The sequence_id should be
  // set to 0 if the client has not received anything.
  message Request {
    string inbox_id = 1;
    uint64 sequence_id = 2;
  }

  repeated Request requests = 1;
}

// Returns all log entries for the requested identities
message GetIdentityUpdatesResponse {
  // A single entry in the XID log on the server.
  message IdentityUpdateLog {
    uint64 sequence_id = 1;
    uint64 server_timestamp_ns = 2;
    xmtp.identity.associations.IdentityUpdate update = 3;
  }

  // The update log for a single identity, starting after the last cursor
  message Response {
    string inbox_id = 1;
    repeated IdentityUpdateLog updates = 2;
  }

  repeated Response responses = 1;
}

// Request to retrieve the XIDs for the given addresses
message GetInboxIdsRequest {
  // A single request for a given address
  message Request {
    string address = 1;
  }

  repeated Request requests = 1;
}

// Response with the XIDs for the requested addresses
message GetInboxIdsResponse {
  // A single response for a given address
  message Response {
    string address = 1;
    optional string inbox_id = 2;
  }

  repeated Response responses = 1;
}

message AddKeyPackageRequest {
  bytes key_package = 1;
}

message AddKeyPackageResponse {}

message GetKeyPackagesRequest {
  repeated bytes installation_keys = 1;
}

message GetKeyPackagesResponse {
  message KeyPackage {
    bytes key_package_tls_serialized = 1;
  }

  repeated KeyPackage key_packages = 1;
}
