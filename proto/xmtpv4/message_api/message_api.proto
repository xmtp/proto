// Message API for XMTP V4
syntax = "proto3";

package xmtp.xmtpv4.message_api;

import "google/api/annotations.proto";
import "xmtpv4/envelopes/envelopes.proto";

option go_package = "github.com/xmtp/proto/v3/go/xmtpv4/message_api";

// Query for envelopes, shared by query and subscribe endpoints
// Either topics or originator_node_ids may be set, but not both
message EnvelopesQuery {
  // Client queries
  repeated bytes topics = 1;
  // Node queries
  repeated uint32 originator_node_ids = 2;
  // The last seen entry per originator. Originators that have not been seen are omitted.
  map<uint32, uint64> last_seen = 3;
}

// Batch subscribe to envelopes
message SubscribeEnvelopesRequest {
  EnvelopesQuery query = 1;
}

// Streamed response for batch subscribe - can be multiple envelopes at once
message SubscribeEnvelopesResponse {
  repeated xmtp.xmtpv4.envelopes.OriginatorEnvelope envelopes = 1;
}

// Query envelopes request
message QueryEnvelopesRequest {
  EnvelopesQuery query = 1;
  uint32 limit = 2;
}

// Query envelopes response
message QueryEnvelopesResponse {
  repeated xmtp.xmtpv4.envelopes.OriginatorEnvelope envelopes = 1;
}

message PublishPayerEnvelopesRequest {
  repeated xmtp.xmtpv4.envelopes.PayerEnvelope payer_envelopes = 1;
}

message PublishPayerEnvelopesResponse {
  repeated xmtp.xmtpv4.envelopes.OriginatorEnvelope originator_envelopes = 1;
}

// Request to retrieve the XIDs for the given addresses
message GetInboxIdsRequest {
  // A single request for a given address
  message Request {
    string address = 1;
  }

  repeated Request requests = 1;
}

// Response with the XIDs for the requested addresses
message GetInboxIdsResponse {
  // A single response for a given address
  message Response {
    string address = 1;
    optional string inbox_id = 2;
  }

  repeated Response responses = 1;
}

service ReplicationApi {
  rpc SubscribeEnvelopes(SubscribeEnvelopesRequest) returns (stream SubscribeEnvelopesResponse) {
    option (google.api.http) = {
      post: "/mls/v2/subscribe-envelopes"
      body: "*"
    };
  }

  rpc QueryEnvelopes(QueryEnvelopesRequest) returns (QueryEnvelopesResponse) {
    option (google.api.http) = {
      post: "/mls/v2/query-envelopes"
      body: "*"
    };
  }

  rpc PublishPayerEnvelopes(PublishPayerEnvelopesRequest) returns (PublishPayerEnvelopesResponse) {
    option (google.api.http) = {
      post: "/mls/v2/publish-payer-envelopes"
      body: "*"
    };
  }

  rpc GetInboxIds(GetInboxIdsRequest) returns (GetInboxIdsResponse) {
    option (google.api.http) = {
      post: "/mls/v2/get-inbox-ids"
      body: "*"
    };
  }
}
