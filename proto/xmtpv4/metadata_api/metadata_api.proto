// Metadata API
syntax = "proto3";

package xmtp.xmtpv4.metadata_api;

import "google/api/annotations.proto";
import "xmtpv4/envelopes/envelopes.proto";

option go_package = "github.com/xmtp/proto/v3/go/xmtpv4/metadata_api";

message GetSyncCursorRequest {}

message GetSyncCursorResponse {
  xmtp.xmtpv4.envelopes.Cursor latest_sync = 1;
}

message GetVersionRequest {}

message GetVersionResponse {
  string version = 1;
}

// Whether to group spend by hour or day
enum PayerInfoGranularity {
  PAYER_INFO_GRANULARITY_UNSPECIFIED = 0;
  PAYER_INFO_GRANULARITY_HOUR = 1;
  PAYER_INFO_GRANULARITY_DAY = 2;
}

// Get information about payer spend and message counts for a given time period
message GetPayerInfoRequest {
  repeated string payer_addresses = 1;
  PayerInfoGranularity granularity = 2;
}

// Response to GetPayerInfoRequest
message GetPayerInfoResponse {
  message PeriodSummary {
    uint64 amount_spent_picodollars = 1;
    uint64 num_messages = 2;
    uint64 period_start_unix_seconds = 3;
  }

  message PayerInfo {
    repeated PeriodSummary period_summaries = 1;
  }

  // Map of payer address
  map<string, PayerInfo> payer_info = 1;
}

// Metadata for distributed tracing, debugging and synchronization
service MetadataApi {
  rpc GetSyncCursor(GetSyncCursorRequest) returns (GetSyncCursorResponse) {
    option (google.api.http) = {
      post: "/mls/v2/metadata/get-sync-cursor"
      body: "*"
    };
  }

  rpc SubscribeSyncCursor(GetSyncCursorRequest) returns (stream GetSyncCursorResponse) {
    option (google.api.http) = {
      post: "/mls/v2/metadata/subscribe-sync-cursor"
      body: "*"
    };
  }

  rpc GetVersion(GetVersionRequest) returns (GetVersionResponse) {
    option (google.api.http) = {
      post: "/mls/v2/metadata/version"
      body: "*"
    };
  }

  rpc GetPayerInfo(GetPayerInfoRequest) returns (GetPayerInfoResponse) {
    option (google.api.http) = {
      post: "/mls/v2/metadata/get-payer-info"
      body: "*"
    };
  }
}
