// Message content encoding structures
syntax = "proto3";

package xmtp.keystore_api.v1;

import "message_contents/ciphertext.proto";
import "message_contents/conversation_reference.proto";
import "message_contents/invitation.proto";
import "message_contents/private_key.proto";
import "message_contents/public_key.proto";

option go_package = "github.com/xmtp/proto/v3/go/keystore_api/v1";
option java_package = "org.xmtp.proto.keystore.api.v1";

// Application-specific error codes for the Keystore API.
enum ErrorCode {
  ERROR_CODE_UNSPECIFIED = 0;
  ERROR_CODE_INVALID_INPUT = 1;
  ERROR_CODE_NO_MATCHING_PREKEY = 2;
}

// Wrapper class for errors from the Keystore API
message KeystoreError {
  string message = 1;
  ErrorCode code = 2;
}

// Decrypt a batch of messages using X3DH key agreement
message DecryptV1Request {
  // A single decryption request
  message Request {
    xmtp.message_contents.Ciphertext payload = 1;
    xmtp.message_contents.PublicKeyBundle peer_keys = 2;
    bytes header_bytes = 3;
    bool is_sender = 4;
  }

  repeated Request requests = 1;
}

// Response type for both V1 and V2 decryption requests
message DecryptResponse {
  // A single decryption response
  message Response {
    // Wrapper object for success response
    message Success {
      bytes decrypted = 1;
    }

    oneof response {
      Success result = 1;
      KeystoreError error = 2;
    }
  }

  repeated Response responses = 1;
}

// Decrypt a batch of messages using the appropriate topic keys
message DecryptV2Request {
  // A single decryption request
  message Request {
    xmtp.message_contents.Ciphertext payload = 1;
    bytes header_bytes = 2;
    string content_topic = 3;
  }

  repeated Request requests = 1;
}

// Encrypt a batch of messages using X3DH key agreement
message EncryptV1Request {
  // A single encryption request
  message Request {
    xmtp.message_contents.PublicKeyBundle recipient = 1;
    bytes payload = 2;
    bytes header_bytes = 3;
  }

  repeated Request requests = 1;
}

// Response type for both V1 and V2 encryption requests
message EncryptResponse {
  // A single encryption response
  message Response {
    // Wrapper object for success response
    message Success {
      xmtp.message_contents.Ciphertext encrypted = 1;
      bytes sender_hmac = 2;
    }

    oneof response {
      Success result = 1;
      KeystoreError error = 2;
    }
  }

  repeated Response responses = 1;
}

// Encrypt a batch of messages using the appropriate topic keys
message EncryptV2Request {
  // A single encryption request
  message Request {
    bytes payload = 1;
    bytes header_bytes = 2;
    string content_topic = 3;
  }

  repeated Request requests = 1;
}

// Encrypt a message for yourself
message SelfEncryptRequest {
  // Request type
  message Request {
    bytes payload = 1;
  }

  repeated Request requests = 1;
}

// Response type for SelfEncryptRequest
message SelfEncryptResponse {
  // Response type
  message Response {
    // Success response
    message Success {
      bytes encrypted = 1;
    }

    oneof response {
      Success result = 1;
      KeystoreError error = 2;
    }
  }

  repeated Response responses = 1;
}

// SelfDecryptRequest
message SelfDecryptRequest {
  // Request type
  message Request {
    bytes payload = 1;
  }

  repeated Request requests = 1;
}

// Get the private preferences topic identifier
message GetPrivatePreferencesTopicIdentifierResponse {
  string identifier = 1;
}

// Request to create an invite payload, and store the topic keys in the Keystore
message CreateInviteRequest {
  xmtp.message_contents.InvitationV1.Context context = 1;
  xmtp.message_contents.SignedPublicKeyBundle recipient = 2;
  uint64 created_ns = 3;
}

// Response to a CreateInviteRequest
message CreateInviteResponse {
  xmtp.message_contents.ConversationReference conversation = 1;
  bytes payload = 2;
}

// Request to save a batch of invite messages to the Keystore
message SaveInvitesRequest {
  // Mirrors xmtp.envelope schema
  message Request {
    string content_topic = 1;
    uint64 timestamp_ns = 2;
    bytes payload = 3;
  }

  repeated Request requests = 1;
}

// Response to a SaveInvitesRequest
message SaveInvitesResponse {
  // A single response
  message Response {
    // Wrapper object for success response
    message Success {
      xmtp.message_contents.ConversationReference conversation = 1;
    }

    oneof response {
      Success result = 1;
      KeystoreError error = 2;
    }
  }

  repeated Response responses = 1;
}

// CreateAuthTokenRequest is used to create an auth token for the XMTP API
message CreateAuthTokenRequest {
  optional uint64 timestamp_ns = 1;
}

// SaveV1ConversationsRequest is used to save a batch of conversations to the
// built in persistence
message SaveV1ConversationsRequest {
  repeated xmtp.message_contents.ConversationReference conversations = 1;
}

// Placeholder response type for SaveV1Conversations
message SaveV1ConversationsResponse {}

// Response for GetV2Conversations
message GetConversationsResponse {
  repeated xmtp.message_contents.ConversationReference conversations = 1;
}

// Used to check if the Keystore implementation has been setup for the given
// wallet address Only used for MM Snap Keystore currently
message GetKeystoreStatusRequest {
  string wallet_address = 1;
}

// Response to GetKeystoreStatusRequest
message GetKeystoreStatusResponse {
  // Status of the Keystore for the specified wallet address
  enum KeystoreStatus {
    KEYSTORE_STATUS_UNSPECIFIED = 0;
    KEYSTORE_STATUS_UNINITIALIZED = 1;
    KEYSTORE_STATUS_INITIALIZED = 2;
  }

  KeystoreStatus status = 1;
}

// Used to initialize the Keystore with a private key bundle retrieved from the
// client
message InitKeystoreRequest {
  oneof bundle {
    xmtp.message_contents.PrivateKeyBundleV1 v1 = 1;
  }
}

// Response to the request to initialize the Keystore
message InitKeystoreResponse {
  KeystoreError error = 1;
}

// SignDigestRequest is used to sign a digest with either the identity key
// or a prekey
message SignDigestRequest {
  bytes digest = 1;
  oneof signer {
    bool identity_key = 2;
    uint32 prekey_index = 3;
  }
}

// JobType is used to specify the type of job the caller would like info on
enum JobType {
  JOB_TYPE_UNSPECIFIED = 0;
  JOB_TYPE_REFRESH_V1 = 1;
  JOB_TYPE_REFRESH_V2 = 2;
  JOB_TYPE_REFRESH_PPPP = 3;
}

// GetRefreshJobRequest is used to get the last run time of a refresh job
message GetRefreshJobRequest {
  JobType job_type = 1;
}

// GetRefreshJobResponse is used to return the last run time of a refresh job
message GetRefreshJobResponse {
  int64 last_run_ns = 1;
}

// SetRefreshJobRequest is used to set the last run time of a refresh job
message SetRefeshJobRequest {
  JobType job_type = 1;
  int64 last_run_ns = 2;
}

// SetRefreshJobResponse is an empty response type
message SetRefreshJobResponse {}

// A mapping of topics to their decrypted invitations
message TopicMap {
  // TopicData wraps the invitation and the timestamp it was created
  message TopicData {
    uint64 created_ns = 1;
    string peer_address = 2;
    xmtp.message_contents.InvitationV1 invitation = 3;
  }
  map<string, TopicData> topics = 1;
}
