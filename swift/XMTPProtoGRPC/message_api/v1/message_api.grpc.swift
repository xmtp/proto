//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: message_api/v1/message_api.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import GRPC
import NIO
import NIOConcurrencyHelpers
import SwiftProtobuf


/// RPC
///
/// Usage: instantiate `Xmtp_MessageApi_V1_MessageApiClient`, then call methods of this protocol to make API calls.
public protocol Xmtp_MessageApi_V1_MessageApiClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: Xmtp_MessageApi_V1_MessageApiClientInterceptorFactoryProtocol? { get }

  func publish(
    _ request: Xmtp_MessageApi_V1_PublishRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Xmtp_MessageApi_V1_PublishRequest, Xmtp_MessageApi_V1_PublishResponse>

  func subscribe(
    _ request: Xmtp_MessageApi_V1_SubscribeRequest,
    callOptions: CallOptions?,
    handler: @escaping (Xmtp_MessageApi_V1_Envelope) -> Void
  ) -> ServerStreamingCall<Xmtp_MessageApi_V1_SubscribeRequest, Xmtp_MessageApi_V1_Envelope>

  func subscribe2(
    callOptions: CallOptions?,
    handler: @escaping (Xmtp_MessageApi_V1_Envelope) -> Void
  ) -> BidirectionalStreamingCall<Xmtp_MessageApi_V1_SubscribeRequest, Xmtp_MessageApi_V1_Envelope>

  func subscribeAll(
    _ request: Xmtp_MessageApi_V1_SubscribeAllRequest,
    callOptions: CallOptions?,
    handler: @escaping (Xmtp_MessageApi_V1_Envelope) -> Void
  ) -> ServerStreamingCall<Xmtp_MessageApi_V1_SubscribeAllRequest, Xmtp_MessageApi_V1_Envelope>

  func query(
    _ request: Xmtp_MessageApi_V1_QueryRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Xmtp_MessageApi_V1_QueryRequest, Xmtp_MessageApi_V1_QueryResponse>

  func batchQuery(
    _ request: Xmtp_MessageApi_V1_BatchQueryRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Xmtp_MessageApi_V1_BatchQueryRequest, Xmtp_MessageApi_V1_BatchQueryResponse>
}

extension Xmtp_MessageApi_V1_MessageApiClientProtocol {
  public var serviceName: String {
    return "xmtp.message_api.v1.MessageApi"
  }

  /// Publish messages to the network
  ///
  /// - Parameters:
  ///   - request: Request to send to Publish.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func publish(
    _ request: Xmtp_MessageApi_V1_PublishRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Xmtp_MessageApi_V1_PublishRequest, Xmtp_MessageApi_V1_PublishResponse> {
    return self.makeUnaryCall(
      path: Xmtp_MessageApi_V1_MessageApiClientMetadata.Methods.publish.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makePublishInterceptors() ?? []
    )
  }

  /// Subscribe to a stream of new envelopes matching a predicate
  ///
  /// - Parameters:
  ///   - request: Request to send to Subscribe.
  ///   - callOptions: Call options.
  ///   - handler: A closure called when each response is received from the server.
  /// - Returns: A `ServerStreamingCall` with futures for the metadata and status.
  public func subscribe(
    _ request: Xmtp_MessageApi_V1_SubscribeRequest,
    callOptions: CallOptions? = nil,
    handler: @escaping (Xmtp_MessageApi_V1_Envelope) -> Void
  ) -> ServerStreamingCall<Xmtp_MessageApi_V1_SubscribeRequest, Xmtp_MessageApi_V1_Envelope> {
    return self.makeServerStreamingCall(
      path: Xmtp_MessageApi_V1_MessageApiClientMetadata.Methods.subscribe.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSubscribeInterceptors() ?? [],
      handler: handler
    )
  }

  /// Subscribe to a stream of new envelopes and your subscription using
  /// bidirectional streaming
  /// protolint:disable:next RPC_REQUEST_STANDARD_NAME
  ///
  /// Callers should use the `send` method on the returned object to send messages
  /// to the server. The caller should send an `.end` after the final message has been sent.
  ///
  /// - Parameters:
  ///   - callOptions: Call options.
  ///   - handler: A closure called when each response is received from the server.
  /// - Returns: A `ClientStreamingCall` with futures for the metadata and status.
  public func subscribe2(
    callOptions: CallOptions? = nil,
    handler: @escaping (Xmtp_MessageApi_V1_Envelope) -> Void
  ) -> BidirectionalStreamingCall<Xmtp_MessageApi_V1_SubscribeRequest, Xmtp_MessageApi_V1_Envelope> {
    return self.makeBidirectionalStreamingCall(
      path: Xmtp_MessageApi_V1_MessageApiClientMetadata.Methods.subscribe2.path,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSubscribe2Interceptors() ?? [],
      handler: handler
    )
  }

  /// Subscribe to a stream of all messages
  ///
  /// - Parameters:
  ///   - request: Request to send to SubscribeAll.
  ///   - callOptions: Call options.
  ///   - handler: A closure called when each response is received from the server.
  /// - Returns: A `ServerStreamingCall` with futures for the metadata and status.
  public func subscribeAll(
    _ request: Xmtp_MessageApi_V1_SubscribeAllRequest,
    callOptions: CallOptions? = nil,
    handler: @escaping (Xmtp_MessageApi_V1_Envelope) -> Void
  ) -> ServerStreamingCall<Xmtp_MessageApi_V1_SubscribeAllRequest, Xmtp_MessageApi_V1_Envelope> {
    return self.makeServerStreamingCall(
      path: Xmtp_MessageApi_V1_MessageApiClientMetadata.Methods.subscribeAll.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSubscribeAllInterceptors() ?? [],
      handler: handler
    )
  }

  /// Query the store for messages
  ///
  /// - Parameters:
  ///   - request: Request to send to Query.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func query(
    _ request: Xmtp_MessageApi_V1_QueryRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Xmtp_MessageApi_V1_QueryRequest, Xmtp_MessageApi_V1_QueryResponse> {
    return self.makeUnaryCall(
      path: Xmtp_MessageApi_V1_MessageApiClientMetadata.Methods.query.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeQueryInterceptors() ?? []
    )
  }

  /// BatchQuery containing a set of queries to be processed
  ///
  /// - Parameters:
  ///   - request: Request to send to BatchQuery.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func batchQuery(
    _ request: Xmtp_MessageApi_V1_BatchQueryRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Xmtp_MessageApi_V1_BatchQueryRequest, Xmtp_MessageApi_V1_BatchQueryResponse> {
    return self.makeUnaryCall(
      path: Xmtp_MessageApi_V1_MessageApiClientMetadata.Methods.batchQuery.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeBatchQueryInterceptors() ?? []
    )
  }
}

#if compiler(>=5.6)
@available(*, deprecated)
extension Xmtp_MessageApi_V1_MessageApiClient: @unchecked Sendable {}
#endif // compiler(>=5.6)

@available(*, deprecated, renamed: "Xmtp_MessageApi_V1_MessageApiNIOClient")
public final class Xmtp_MessageApi_V1_MessageApiClient: Xmtp_MessageApi_V1_MessageApiClientProtocol {
  private let lock = Lock()
  private var _defaultCallOptions: CallOptions
  private var _interceptors: Xmtp_MessageApi_V1_MessageApiClientInterceptorFactoryProtocol?
  public let channel: GRPCChannel
  public var defaultCallOptions: CallOptions {
    get { self.lock.withLock { return self._defaultCallOptions } }
    set { self.lock.withLockVoid { self._defaultCallOptions = newValue } }
  }
  public var interceptors: Xmtp_MessageApi_V1_MessageApiClientInterceptorFactoryProtocol? {
    get { self.lock.withLock { return self._interceptors } }
    set { self.lock.withLockVoid { self._interceptors = newValue } }
  }

  /// Creates a client for the xmtp.message_api.v1.MessageApi service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  public init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Xmtp_MessageApi_V1_MessageApiClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self._defaultCallOptions = defaultCallOptions
    self._interceptors = interceptors
  }
}

public struct Xmtp_MessageApi_V1_MessageApiNIOClient: Xmtp_MessageApi_V1_MessageApiClientProtocol {
  public var channel: GRPCChannel
  public var defaultCallOptions: CallOptions
  public var interceptors: Xmtp_MessageApi_V1_MessageApiClientInterceptorFactoryProtocol?

  /// Creates a client for the xmtp.message_api.v1.MessageApi service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  public init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Xmtp_MessageApi_V1_MessageApiClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

#if compiler(>=5.6)
/// RPC
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
public protocol Xmtp_MessageApi_V1_MessageApiAsyncClientProtocol: GRPCClient {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: Xmtp_MessageApi_V1_MessageApiClientInterceptorFactoryProtocol? { get }

  func makePublishCall(
    _ request: Xmtp_MessageApi_V1_PublishRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Xmtp_MessageApi_V1_PublishRequest, Xmtp_MessageApi_V1_PublishResponse>

  func makeSubscribeCall(
    _ request: Xmtp_MessageApi_V1_SubscribeRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncServerStreamingCall<Xmtp_MessageApi_V1_SubscribeRequest, Xmtp_MessageApi_V1_Envelope>

  func makeSubscribe2Call(
    callOptions: CallOptions?
  ) -> GRPCAsyncBidirectionalStreamingCall<Xmtp_MessageApi_V1_SubscribeRequest, Xmtp_MessageApi_V1_Envelope>

  func makeSubscribeAllCall(
    _ request: Xmtp_MessageApi_V1_SubscribeAllRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncServerStreamingCall<Xmtp_MessageApi_V1_SubscribeAllRequest, Xmtp_MessageApi_V1_Envelope>

  func makeQueryCall(
    _ request: Xmtp_MessageApi_V1_QueryRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Xmtp_MessageApi_V1_QueryRequest, Xmtp_MessageApi_V1_QueryResponse>

  func makeBatchQueryCall(
    _ request: Xmtp_MessageApi_V1_BatchQueryRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Xmtp_MessageApi_V1_BatchQueryRequest, Xmtp_MessageApi_V1_BatchQueryResponse>
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Xmtp_MessageApi_V1_MessageApiAsyncClientProtocol {
  public static var serviceDescriptor: GRPCServiceDescriptor {
    return Xmtp_MessageApi_V1_MessageApiClientMetadata.serviceDescriptor
  }

  public var interceptors: Xmtp_MessageApi_V1_MessageApiClientInterceptorFactoryProtocol? {
    return nil
  }

  public func makePublishCall(
    _ request: Xmtp_MessageApi_V1_PublishRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Xmtp_MessageApi_V1_PublishRequest, Xmtp_MessageApi_V1_PublishResponse> {
    return self.makeAsyncUnaryCall(
      path: Xmtp_MessageApi_V1_MessageApiClientMetadata.Methods.publish.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makePublishInterceptors() ?? []
    )
  }

  public func makeSubscribeCall(
    _ request: Xmtp_MessageApi_V1_SubscribeRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncServerStreamingCall<Xmtp_MessageApi_V1_SubscribeRequest, Xmtp_MessageApi_V1_Envelope> {
    return self.makeAsyncServerStreamingCall(
      path: Xmtp_MessageApi_V1_MessageApiClientMetadata.Methods.subscribe.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSubscribeInterceptors() ?? []
    )
  }

  public func makeSubscribe2Call(
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncBidirectionalStreamingCall<Xmtp_MessageApi_V1_SubscribeRequest, Xmtp_MessageApi_V1_Envelope> {
    return self.makeAsyncBidirectionalStreamingCall(
      path: Xmtp_MessageApi_V1_MessageApiClientMetadata.Methods.subscribe2.path,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSubscribe2Interceptors() ?? []
    )
  }

  public func makeSubscribeAllCall(
    _ request: Xmtp_MessageApi_V1_SubscribeAllRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncServerStreamingCall<Xmtp_MessageApi_V1_SubscribeAllRequest, Xmtp_MessageApi_V1_Envelope> {
    return self.makeAsyncServerStreamingCall(
      path: Xmtp_MessageApi_V1_MessageApiClientMetadata.Methods.subscribeAll.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSubscribeAllInterceptors() ?? []
    )
  }

  public func makeQueryCall(
    _ request: Xmtp_MessageApi_V1_QueryRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Xmtp_MessageApi_V1_QueryRequest, Xmtp_MessageApi_V1_QueryResponse> {
    return self.makeAsyncUnaryCall(
      path: Xmtp_MessageApi_V1_MessageApiClientMetadata.Methods.query.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeQueryInterceptors() ?? []
    )
  }

  public func makeBatchQueryCall(
    _ request: Xmtp_MessageApi_V1_BatchQueryRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Xmtp_MessageApi_V1_BatchQueryRequest, Xmtp_MessageApi_V1_BatchQueryResponse> {
    return self.makeAsyncUnaryCall(
      path: Xmtp_MessageApi_V1_MessageApiClientMetadata.Methods.batchQuery.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeBatchQueryInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Xmtp_MessageApi_V1_MessageApiAsyncClientProtocol {
  public func publish(
    _ request: Xmtp_MessageApi_V1_PublishRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Xmtp_MessageApi_V1_PublishResponse {
    return try await self.performAsyncUnaryCall(
      path: Xmtp_MessageApi_V1_MessageApiClientMetadata.Methods.publish.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makePublishInterceptors() ?? []
    )
  }

  public func subscribe(
    _ request: Xmtp_MessageApi_V1_SubscribeRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncResponseStream<Xmtp_MessageApi_V1_Envelope> {
    return self.performAsyncServerStreamingCall(
      path: Xmtp_MessageApi_V1_MessageApiClientMetadata.Methods.subscribe.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSubscribeInterceptors() ?? []
    )
  }

  public func subscribe2<RequestStream>(
    _ requests: RequestStream,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncResponseStream<Xmtp_MessageApi_V1_Envelope> where RequestStream: Sequence, RequestStream.Element == Xmtp_MessageApi_V1_SubscribeRequest {
    return self.performAsyncBidirectionalStreamingCall(
      path: Xmtp_MessageApi_V1_MessageApiClientMetadata.Methods.subscribe2.path,
      requests: requests,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSubscribe2Interceptors() ?? []
    )
  }

  public func subscribe2<RequestStream>(
    _ requests: RequestStream,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncResponseStream<Xmtp_MessageApi_V1_Envelope> where RequestStream: AsyncSequence & Sendable, RequestStream.Element == Xmtp_MessageApi_V1_SubscribeRequest {
    return self.performAsyncBidirectionalStreamingCall(
      path: Xmtp_MessageApi_V1_MessageApiClientMetadata.Methods.subscribe2.path,
      requests: requests,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSubscribe2Interceptors() ?? []
    )
  }

  public func subscribeAll(
    _ request: Xmtp_MessageApi_V1_SubscribeAllRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncResponseStream<Xmtp_MessageApi_V1_Envelope> {
    return self.performAsyncServerStreamingCall(
      path: Xmtp_MessageApi_V1_MessageApiClientMetadata.Methods.subscribeAll.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSubscribeAllInterceptors() ?? []
    )
  }

  public func query(
    _ request: Xmtp_MessageApi_V1_QueryRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Xmtp_MessageApi_V1_QueryResponse {
    return try await self.performAsyncUnaryCall(
      path: Xmtp_MessageApi_V1_MessageApiClientMetadata.Methods.query.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeQueryInterceptors() ?? []
    )
  }

  public func batchQuery(
    _ request: Xmtp_MessageApi_V1_BatchQueryRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Xmtp_MessageApi_V1_BatchQueryResponse {
    return try await self.performAsyncUnaryCall(
      path: Xmtp_MessageApi_V1_MessageApiClientMetadata.Methods.batchQuery.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeBatchQueryInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
public struct Xmtp_MessageApi_V1_MessageApiAsyncClient: Xmtp_MessageApi_V1_MessageApiAsyncClientProtocol {
  public var channel: GRPCChannel
  public var defaultCallOptions: CallOptions
  public var interceptors: Xmtp_MessageApi_V1_MessageApiClientInterceptorFactoryProtocol?

  public init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Xmtp_MessageApi_V1_MessageApiClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

#endif // compiler(>=5.6)

public protocol Xmtp_MessageApi_V1_MessageApiClientInterceptorFactoryProtocol: GRPCSendable {

  /// - Returns: Interceptors to use when invoking 'publish'.
  func makePublishInterceptors() -> [ClientInterceptor<Xmtp_MessageApi_V1_PublishRequest, Xmtp_MessageApi_V1_PublishResponse>]

  /// - Returns: Interceptors to use when invoking 'subscribe'.
  func makeSubscribeInterceptors() -> [ClientInterceptor<Xmtp_MessageApi_V1_SubscribeRequest, Xmtp_MessageApi_V1_Envelope>]

  /// - Returns: Interceptors to use when invoking 'subscribe2'.
  func makeSubscribe2Interceptors() -> [ClientInterceptor<Xmtp_MessageApi_V1_SubscribeRequest, Xmtp_MessageApi_V1_Envelope>]

  /// - Returns: Interceptors to use when invoking 'subscribeAll'.
  func makeSubscribeAllInterceptors() -> [ClientInterceptor<Xmtp_MessageApi_V1_SubscribeAllRequest, Xmtp_MessageApi_V1_Envelope>]

  /// - Returns: Interceptors to use when invoking 'query'.
  func makeQueryInterceptors() -> [ClientInterceptor<Xmtp_MessageApi_V1_QueryRequest, Xmtp_MessageApi_V1_QueryResponse>]

  /// - Returns: Interceptors to use when invoking 'batchQuery'.
  func makeBatchQueryInterceptors() -> [ClientInterceptor<Xmtp_MessageApi_V1_BatchQueryRequest, Xmtp_MessageApi_V1_BatchQueryResponse>]
}

public enum Xmtp_MessageApi_V1_MessageApiClientMetadata {
  public static let serviceDescriptor = GRPCServiceDescriptor(
    name: "MessageApi",
    fullName: "xmtp.message_api.v1.MessageApi",
    methods: [
      Xmtp_MessageApi_V1_MessageApiClientMetadata.Methods.publish,
      Xmtp_MessageApi_V1_MessageApiClientMetadata.Methods.subscribe,
      Xmtp_MessageApi_V1_MessageApiClientMetadata.Methods.subscribe2,
      Xmtp_MessageApi_V1_MessageApiClientMetadata.Methods.subscribeAll,
      Xmtp_MessageApi_V1_MessageApiClientMetadata.Methods.query,
      Xmtp_MessageApi_V1_MessageApiClientMetadata.Methods.batchQuery,
    ]
  )

  public enum Methods {
    public static let publish = GRPCMethodDescriptor(
      name: "Publish",
      path: "/xmtp.message_api.v1.MessageApi/Publish",
      type: GRPCCallType.unary
    )

    public static let subscribe = GRPCMethodDescriptor(
      name: "Subscribe",
      path: "/xmtp.message_api.v1.MessageApi/Subscribe",
      type: GRPCCallType.serverStreaming
    )

    public static let subscribe2 = GRPCMethodDescriptor(
      name: "Subscribe2",
      path: "/xmtp.message_api.v1.MessageApi/Subscribe2",
      type: GRPCCallType.bidirectionalStreaming
    )

    public static let subscribeAll = GRPCMethodDescriptor(
      name: "SubscribeAll",
      path: "/xmtp.message_api.v1.MessageApi/SubscribeAll",
      type: GRPCCallType.serverStreaming
    )

    public static let query = GRPCMethodDescriptor(
      name: "Query",
      path: "/xmtp.message_api.v1.MessageApi/Query",
      type: GRPCCallType.unary
    )

    public static let batchQuery = GRPCMethodDescriptor(
      name: "BatchQuery",
      path: "/xmtp.message_api.v1.MessageApi/BatchQuery",
      type: GRPCCallType.unary
    )
  }
}

/// RPC
///
/// To build a server, implement a class that conforms to this protocol.
public protocol Xmtp_MessageApi_V1_MessageApiProvider: CallHandlerProvider {
  var interceptors: Xmtp_MessageApi_V1_MessageApiServerInterceptorFactoryProtocol? { get }

  /// Publish messages to the network
  func publish(request: Xmtp_MessageApi_V1_PublishRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Xmtp_MessageApi_V1_PublishResponse>

  /// Subscribe to a stream of new envelopes matching a predicate
  func subscribe(request: Xmtp_MessageApi_V1_SubscribeRequest, context: StreamingResponseCallContext<Xmtp_MessageApi_V1_Envelope>) -> EventLoopFuture<GRPCStatus>

  /// Subscribe to a stream of new envelopes and your subscription using
  /// bidirectional streaming
  /// protolint:disable:next RPC_REQUEST_STANDARD_NAME
  func subscribe2(context: StreamingResponseCallContext<Xmtp_MessageApi_V1_Envelope>) -> EventLoopFuture<(StreamEvent<Xmtp_MessageApi_V1_SubscribeRequest>) -> Void>

  /// Subscribe to a stream of all messages
  func subscribeAll(request: Xmtp_MessageApi_V1_SubscribeAllRequest, context: StreamingResponseCallContext<Xmtp_MessageApi_V1_Envelope>) -> EventLoopFuture<GRPCStatus>

  /// Query the store for messages
  func query(request: Xmtp_MessageApi_V1_QueryRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Xmtp_MessageApi_V1_QueryResponse>

  /// BatchQuery containing a set of queries to be processed
  func batchQuery(request: Xmtp_MessageApi_V1_BatchQueryRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Xmtp_MessageApi_V1_BatchQueryResponse>
}

extension Xmtp_MessageApi_V1_MessageApiProvider {
  public var serviceName: Substring {
    return Xmtp_MessageApi_V1_MessageApiServerMetadata.serviceDescriptor.fullName[...]
  }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  public func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "Publish":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Xmtp_MessageApi_V1_PublishRequest>(),
        responseSerializer: ProtobufSerializer<Xmtp_MessageApi_V1_PublishResponse>(),
        interceptors: self.interceptors?.makePublishInterceptors() ?? [],
        userFunction: self.publish(request:context:)
      )

    case "Subscribe":
      return ServerStreamingServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Xmtp_MessageApi_V1_SubscribeRequest>(),
        responseSerializer: ProtobufSerializer<Xmtp_MessageApi_V1_Envelope>(),
        interceptors: self.interceptors?.makeSubscribeInterceptors() ?? [],
        userFunction: self.subscribe(request:context:)
      )

    case "Subscribe2":
      return BidirectionalStreamingServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Xmtp_MessageApi_V1_SubscribeRequest>(),
        responseSerializer: ProtobufSerializer<Xmtp_MessageApi_V1_Envelope>(),
        interceptors: self.interceptors?.makeSubscribe2Interceptors() ?? [],
        observerFactory: self.subscribe2(context:)
      )

    case "SubscribeAll":
      return ServerStreamingServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Xmtp_MessageApi_V1_SubscribeAllRequest>(),
        responseSerializer: ProtobufSerializer<Xmtp_MessageApi_V1_Envelope>(),
        interceptors: self.interceptors?.makeSubscribeAllInterceptors() ?? [],
        userFunction: self.subscribeAll(request:context:)
      )

    case "Query":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Xmtp_MessageApi_V1_QueryRequest>(),
        responseSerializer: ProtobufSerializer<Xmtp_MessageApi_V1_QueryResponse>(),
        interceptors: self.interceptors?.makeQueryInterceptors() ?? [],
        userFunction: self.query(request:context:)
      )

    case "BatchQuery":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Xmtp_MessageApi_V1_BatchQueryRequest>(),
        responseSerializer: ProtobufSerializer<Xmtp_MessageApi_V1_BatchQueryResponse>(),
        interceptors: self.interceptors?.makeBatchQueryInterceptors() ?? [],
        userFunction: self.batchQuery(request:context:)
      )

    default:
      return nil
    }
  }
}

#if compiler(>=5.6)

/// RPC
///
/// To implement a server, implement an object which conforms to this protocol.
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
public protocol Xmtp_MessageApi_V1_MessageApiAsyncProvider: CallHandlerProvider {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: Xmtp_MessageApi_V1_MessageApiServerInterceptorFactoryProtocol? { get }

  /// Publish messages to the network
  @Sendable func publish(
    request: Xmtp_MessageApi_V1_PublishRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Xmtp_MessageApi_V1_PublishResponse

  /// Subscribe to a stream of new envelopes matching a predicate
  @Sendable func subscribe(
    request: Xmtp_MessageApi_V1_SubscribeRequest,
    responseStream: GRPCAsyncResponseStreamWriter<Xmtp_MessageApi_V1_Envelope>,
    context: GRPCAsyncServerCallContext
  ) async throws

  /// Subscribe to a stream of new envelopes and your subscription using
  /// bidirectional streaming
  /// protolint:disable:next RPC_REQUEST_STANDARD_NAME
  @Sendable func subscribe2(
    requestStream: GRPCAsyncRequestStream<Xmtp_MessageApi_V1_SubscribeRequest>,
    responseStream: GRPCAsyncResponseStreamWriter<Xmtp_MessageApi_V1_Envelope>,
    context: GRPCAsyncServerCallContext
  ) async throws

  /// Subscribe to a stream of all messages
  @Sendable func subscribeAll(
    request: Xmtp_MessageApi_V1_SubscribeAllRequest,
    responseStream: GRPCAsyncResponseStreamWriter<Xmtp_MessageApi_V1_Envelope>,
    context: GRPCAsyncServerCallContext
  ) async throws

  /// Query the store for messages
  @Sendable func query(
    request: Xmtp_MessageApi_V1_QueryRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Xmtp_MessageApi_V1_QueryResponse

  /// BatchQuery containing a set of queries to be processed
  @Sendable func batchQuery(
    request: Xmtp_MessageApi_V1_BatchQueryRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Xmtp_MessageApi_V1_BatchQueryResponse
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Xmtp_MessageApi_V1_MessageApiAsyncProvider {
  public static var serviceDescriptor: GRPCServiceDescriptor {
    return Xmtp_MessageApi_V1_MessageApiServerMetadata.serviceDescriptor
  }

  public var serviceName: Substring {
    return Xmtp_MessageApi_V1_MessageApiServerMetadata.serviceDescriptor.fullName[...]
  }

  public var interceptors: Xmtp_MessageApi_V1_MessageApiServerInterceptorFactoryProtocol? {
    return nil
  }

  public func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "Publish":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Xmtp_MessageApi_V1_PublishRequest>(),
        responseSerializer: ProtobufSerializer<Xmtp_MessageApi_V1_PublishResponse>(),
        interceptors: self.interceptors?.makePublishInterceptors() ?? [],
        wrapping: self.publish(request:context:)
      )

    case "Subscribe":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Xmtp_MessageApi_V1_SubscribeRequest>(),
        responseSerializer: ProtobufSerializer<Xmtp_MessageApi_V1_Envelope>(),
        interceptors: self.interceptors?.makeSubscribeInterceptors() ?? [],
        wrapping: self.subscribe(request:responseStream:context:)
      )

    case "Subscribe2":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Xmtp_MessageApi_V1_SubscribeRequest>(),
        responseSerializer: ProtobufSerializer<Xmtp_MessageApi_V1_Envelope>(),
        interceptors: self.interceptors?.makeSubscribe2Interceptors() ?? [],
        wrapping: self.subscribe2(requestStream:responseStream:context:)
      )

    case "SubscribeAll":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Xmtp_MessageApi_V1_SubscribeAllRequest>(),
        responseSerializer: ProtobufSerializer<Xmtp_MessageApi_V1_Envelope>(),
        interceptors: self.interceptors?.makeSubscribeAllInterceptors() ?? [],
        wrapping: self.subscribeAll(request:responseStream:context:)
      )

    case "Query":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Xmtp_MessageApi_V1_QueryRequest>(),
        responseSerializer: ProtobufSerializer<Xmtp_MessageApi_V1_QueryResponse>(),
        interceptors: self.interceptors?.makeQueryInterceptors() ?? [],
        wrapping: self.query(request:context:)
      )

    case "BatchQuery":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Xmtp_MessageApi_V1_BatchQueryRequest>(),
        responseSerializer: ProtobufSerializer<Xmtp_MessageApi_V1_BatchQueryResponse>(),
        interceptors: self.interceptors?.makeBatchQueryInterceptors() ?? [],
        wrapping: self.batchQuery(request:context:)
      )

    default:
      return nil
    }
  }
}

#endif // compiler(>=5.6)

public protocol Xmtp_MessageApi_V1_MessageApiServerInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when handling 'publish'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makePublishInterceptors() -> [ServerInterceptor<Xmtp_MessageApi_V1_PublishRequest, Xmtp_MessageApi_V1_PublishResponse>]

  /// - Returns: Interceptors to use when handling 'subscribe'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeSubscribeInterceptors() -> [ServerInterceptor<Xmtp_MessageApi_V1_SubscribeRequest, Xmtp_MessageApi_V1_Envelope>]

  /// - Returns: Interceptors to use when handling 'subscribe2'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeSubscribe2Interceptors() -> [ServerInterceptor<Xmtp_MessageApi_V1_SubscribeRequest, Xmtp_MessageApi_V1_Envelope>]

  /// - Returns: Interceptors to use when handling 'subscribeAll'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeSubscribeAllInterceptors() -> [ServerInterceptor<Xmtp_MessageApi_V1_SubscribeAllRequest, Xmtp_MessageApi_V1_Envelope>]

  /// - Returns: Interceptors to use when handling 'query'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeQueryInterceptors() -> [ServerInterceptor<Xmtp_MessageApi_V1_QueryRequest, Xmtp_MessageApi_V1_QueryResponse>]

  /// - Returns: Interceptors to use when handling 'batchQuery'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeBatchQueryInterceptors() -> [ServerInterceptor<Xmtp_MessageApi_V1_BatchQueryRequest, Xmtp_MessageApi_V1_BatchQueryResponse>]
}

public enum Xmtp_MessageApi_V1_MessageApiServerMetadata {
  public static let serviceDescriptor = GRPCServiceDescriptor(
    name: "MessageApi",
    fullName: "xmtp.message_api.v1.MessageApi",
    methods: [
      Xmtp_MessageApi_V1_MessageApiServerMetadata.Methods.publish,
      Xmtp_MessageApi_V1_MessageApiServerMetadata.Methods.subscribe,
      Xmtp_MessageApi_V1_MessageApiServerMetadata.Methods.subscribe2,
      Xmtp_MessageApi_V1_MessageApiServerMetadata.Methods.subscribeAll,
      Xmtp_MessageApi_V1_MessageApiServerMetadata.Methods.query,
      Xmtp_MessageApi_V1_MessageApiServerMetadata.Methods.batchQuery,
    ]
  )

  public enum Methods {
    public static let publish = GRPCMethodDescriptor(
      name: "Publish",
      path: "/xmtp.message_api.v1.MessageApi/Publish",
      type: GRPCCallType.unary
    )

    public static let subscribe = GRPCMethodDescriptor(
      name: "Subscribe",
      path: "/xmtp.message_api.v1.MessageApi/Subscribe",
      type: GRPCCallType.serverStreaming
    )

    public static let subscribe2 = GRPCMethodDescriptor(
      name: "Subscribe2",
      path: "/xmtp.message_api.v1.MessageApi/Subscribe2",
      type: GRPCCallType.bidirectionalStreaming
    )

    public static let subscribeAll = GRPCMethodDescriptor(
      name: "SubscribeAll",
      path: "/xmtp.message_api.v1.MessageApi/SubscribeAll",
      type: GRPCCallType.serverStreaming
    )

    public static let query = GRPCMethodDescriptor(
      name: "Query",
      path: "/xmtp.message_api.v1.MessageApi/Query",
      type: GRPCCallType.unary
    )

    public static let batchQuery = GRPCMethodDescriptor(
      name: "BatchQuery",
      path: "/xmtp.message_api.v1.MessageApi/BatchQuery",
      type: GRPCCallType.unary
    )
  }
}
